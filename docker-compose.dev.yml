version: "3.8"
services:
  rabbitmq:
    image: rabbitmq:4.1-management
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      - RABBITMQ_ERLANG_COOKIE=SWQOKODSQALRPCLNMEQG
      - RABBITMQ_NODE_NAME=rabbit@localhost
    command: >
      bash -c "
        echo 'vm_memory_high_watermark.relative = 0.4' >> /etc/rabbitmq/rabbitmq.conf &&
        echo 'disk_free_limit.relative = 2.0' >> /etc/rabbitmq/rabbitmq.conf &&
        docker-entrypoint.sh rabbitmq-server
      "

  minio:
    image: minio/minio
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    command: server /data
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  postgres:
    image: postgres:17
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: images
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d images"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:postgres@postgres:5432/images?sslmode=disable"
    depends_on:
      postgres:
        condition: service_healthy
    command:
      - '--extend.query-path=/etc/postgres_exporter/queries.yaml'
    volumes:
      - ./monitoring/postgres-queries.yaml:/etc/postgres_exporter/queries.yaml:ro

  url-ingestor:
    build:
      context: .
      dockerfile: ./docker/url-ingestor.dev.Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SERVER_PORT=8080
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
    volumes:
      - .:/app
      - /app/tmp
      - /app/vendor
    depends_on:
      - rabbitmq
    command: ["air", "-c", ".air.toml"]

  image-fetcher:
    build:
      context: .
      dockerfile: ./docker/image-fetcher.dev.Dockerfile
    environment:
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_USE_SSL=false
      - MINIO_BUCKET=images
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=images
      - DB_SSLMODE=disable
    volumes:
      - .:/app
      - /app/tmp
      - /app/vendor
    depends_on:
      rabbitmq:
        condition: service_started
      minio:
        condition: service_healthy
      postgres:
        condition: service_healthy
    command: ["air", "-c", "air-image-fetcher.toml"]

  image-metadata:
    build:
      context: .
      dockerfile: ./docker/image-metadata.dev.Dockerfile
    environment:
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=images
      - DB_SSLMODE=disable
    volumes:
      - .:/app
      - /app/tmp
      - /app/vendor
    depends_on:
      rabbitmq:
        condition: service_started
      postgres:
        condition: service_healthy
    command: ["air", "-c", "air-image-metadata.toml"]

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true

volumes:
  rabbitmq_data:
  minio_data:
  postgres_data:
  prometheus_data:
  grafana_data: 